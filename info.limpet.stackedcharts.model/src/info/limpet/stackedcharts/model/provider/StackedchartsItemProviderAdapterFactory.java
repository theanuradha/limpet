/**
 */
package info.limpet.stackedcharts.model.provider;

import info.limpet.stackedcharts.model.util.StackedchartsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StackedchartsItemProviderAdapterFactory extends StackedchartsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StackedchartsItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.ChartSet} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChartSetItemProvider chartSetItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.ChartSet}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createChartSetAdapter()
  {
    if (chartSetItemProvider == null)
    {
      chartSetItemProvider = new ChartSetItemProvider(this);
    }

    return chartSetItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.Chart} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChartItemProvider chartItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.Chart}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createChartAdapter()
  {
    if (chartItemProvider == null)
    {
      chartItemProvider = new ChartItemProvider(this);
    }

    return chartItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.DependentAxis} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DependentAxisItemProvider dependentAxisItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.DependentAxis}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDependentAxisAdapter()
  {
    if (dependentAxisItemProvider == null)
    {
      dependentAxisItemProvider = new DependentAxisItemProvider(this);
    }

    return dependentAxisItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.Dataset} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatasetItemProvider datasetItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.Dataset}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDatasetAdapter()
  {
    if (datasetItemProvider == null)
    {
      datasetItemProvider = new DatasetItemProvider(this);
    }

    return datasetItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.DataItem} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataItemItemProvider dataItemItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.DataItem}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDataItemAdapter()
  {
    if (dataItemItemProvider == null)
    {
      dataItemItemProvider = new DataItemItemProvider(this);
    }

    return dataItemItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.Zone} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ZoneItemProvider zoneItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.Zone}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createZoneAdapter()
  {
    if (zoneItemProvider == null)
    {
      zoneItemProvider = new ZoneItemProvider(this);
    }

    return zoneItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.Marker} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MarkerItemProvider markerItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.Marker}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMarkerAdapter()
  {
    if (markerItemProvider == null)
    {
      markerItemProvider = new MarkerItemProvider(this);
    }

    return markerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.Styling} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StylingItemProvider stylingItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.Styling}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStylingAdapter()
  {
    if (stylingItemProvider == null)
    {
      stylingItemProvider = new StylingItemProvider(this);
    }

    return stylingItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.PlainStyling} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PlainStylingItemProvider plainStylingItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.PlainStyling}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPlainStylingAdapter()
  {
    if (plainStylingItemProvider == null)
    {
      plainStylingItemProvider = new PlainStylingItemProvider(this);
    }

    return plainStylingItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.LinearStyling} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LinearStylingItemProvider linearStylingItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.LinearStyling}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLinearStylingAdapter()
  {
    if (linearStylingItemProvider == null)
    {
      linearStylingItemProvider = new LinearStylingItemProvider(this);
    }

    return linearStylingItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.IndependentAxis} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndependentAxisItemProvider independentAxisItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.IndependentAxis}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIndependentAxisAdapter()
  {
    if (independentAxisItemProvider == null)
    {
      independentAxisItemProvider = new IndependentAxisItemProvider(this);
    }

    return independentAxisItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.ScatterSet} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScatterSetItemProvider scatterSetItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.ScatterSet}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createScatterSetAdapter()
  {
    if (scatterSetItemProvider == null)
    {
      scatterSetItemProvider = new ScatterSetItemProvider(this);
    }

    return scatterSetItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.Datum} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatumItemProvider datumItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.Datum}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDatumAdapter()
  {
    if (datumItemProvider == null)
    {
      datumItemProvider = new DatumItemProvider(this);
    }

    return datumItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link info.limpet.stackedcharts.model.SelectiveAnnotation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectiveAnnotationItemProvider selectiveAnnotationItemProvider;

  /**
   * This creates an adapter for a {@link info.limpet.stackedcharts.model.SelectiveAnnotation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSelectiveAnnotationAdapter()
  {
    if (selectiveAnnotationItemProvider == null)
    {
      selectiveAnnotationItemProvider = new SelectiveAnnotationItemProvider(this);
    }

    return selectiveAnnotationItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (chartSetItemProvider != null) chartSetItemProvider.dispose();
    if (chartItemProvider != null) chartItemProvider.dispose();
    if (dependentAxisItemProvider != null) dependentAxisItemProvider.dispose();
    if (datasetItemProvider != null) datasetItemProvider.dispose();
    if (dataItemItemProvider != null) dataItemItemProvider.dispose();
    if (zoneItemProvider != null) zoneItemProvider.dispose();
    if (markerItemProvider != null) markerItemProvider.dispose();
    if (stylingItemProvider != null) stylingItemProvider.dispose();
    if (plainStylingItemProvider != null) plainStylingItemProvider.dispose();
    if (linearStylingItemProvider != null) linearStylingItemProvider.dispose();
    if (independentAxisItemProvider != null) independentAxisItemProvider.dispose();
    if (scatterSetItemProvider != null) scatterSetItemProvider.dispose();
    if (datumItemProvider != null) datumItemProvider.dispose();
    if (selectiveAnnotationItemProvider != null) selectiveAnnotationItemProvider.dispose();
  }

}
